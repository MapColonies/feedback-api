name: pull_request

on: [pull_request, workflow_dispatch]

jobs:
  eslint:
    name: Run eslint
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install dependencies
        run: npm ci

      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          github_token: ${{ secrets.github_token }}
          # Enable linters
          eslint: true
          prettier: true
          eslint_extensions: ts

      - name: OpenAPI Lint Checks
        uses: nwestfall/openapi-action@v1.0.2
        with:
         github_token: ${{ secrets.GITHUB_TOKEN }}
         file: ./openapi3.yaml

  tests:
      name: Run Tests
      runs-on: ubuntu-latest
      container: node:16

      services:
        # Label used to access the service container
        redis:
          # Docker Hub image
          image: redis
          # Provide the password for postgres
          env:
            REDIS_HOST: localhost
            REDIS_PORT: 6379
            REDIS_USERNAME: ""
            REDIS_PASSWORD: ""
            REDIS_ENABLE_SSL_AUTH: false
            REDIS_DATABASE: 1

          # Set health checks to wait until postgres has started
          options: >-
            --health-cmd redis-cli ping
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        
        kafka:
          # Docker Hub image
          image: apache/kafka:3.8.0
          # Provide the password for postgres
          env:
            KAFKA_BROKERS: localhost:9092
          # Set health checks to wait until postgres has started
                  
        outputTopic:
          image: ''
          env:
            KAFKA_OUTPUT_TOPIC: testTopic

      strategy:
        matrix:
          node: [14.x, 16.x]

      steps:
        - name: Check out Git repository
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v1
          with:
            node-version: ${{ matrix.node }}

        - name: Install Node.js dependencies
          run: npm ci

        - name: Run tests
          run: npm run test

        - uses: actions/upload-artifact@v2
          with:
            name: Test Reporters
            path: reports/**

  build_image:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: build Docker image
        run: docker build -t test-build:latest .
